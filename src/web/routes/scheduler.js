const express = require('express');
const router = express.Router();
const DailyScheduler = require('../../scheduler/daily-scheduler');
const { getInstance: getActivityTracker } = require('../../orchestrator/activity-tracker');
const logger = require('../../utils/logger');

// Instance du scheduler
const scheduler = new DailyScheduler();

// Initialiser le scheduler (d√©marrage manuel via l'interface)
scheduler.initialize().catch(error => {
  logger.error('Erreur lors de l\'initialisation du DailyScheduler:', error.message);
});

// === CONTR√îLE DU SCHEDULER ===

// Obtenir le statut du scheduler
router.get('/status', (req, res) => {
  try {
    const status = scheduler.getSchedulerStatus();

    res.json({
      success: true,
      status,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration du statut du scheduler:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du statut',
      details: error.message
    });
  }
});

// D√©marrer le scheduler
router.post('/start', async (req, res) => {
  try {
    const success = scheduler.startScheduler();

    if (success) {
      logger.info('Scheduler d√©marr√© via API');
      res.json({
        success: true,
        message: 'Scheduler d√©marr√© avec succ√®s',
        status: scheduler.getSchedulerStatus()
      });
    } else {
      res.status(500).json({
        error: '√âchec du d√©marrage du scheduler'
      });
    }

  } catch (error) {
    logger.error('Erreur lors du d√©marrage du scheduler:', error.message);
    res.status(500).json({
      error: 'Erreur lors du d√©marrage du scheduler',
      details: error.message
    });
  }
});

// Arr√™ter le scheduler
router.post('/stop', async (req, res) => {
  try {
    const success = scheduler.stopScheduler();

    if (success) {
      logger.info('Scheduler arr√™t√© via API');
      res.json({
        success: true,
        message: 'Scheduler arr√™t√© avec succ√®s'
      });
    } else {
      res.status(500).json({
        error: '√âchec de l\'arr√™t du scheduler'
      });
    }

  } catch (error) {
    logger.error('Erreur lors de l\'arr√™t du scheduler:', error.message);
    res.status(500).json({
      error: 'Erreur lors de l\'arr√™t du scheduler',
      details: error.message
    });
  }
});

// === EX√âCUTION MANUELLE ===

// Lancer l'organisation quotidienne manuellement
router.post('/run', async (req, res) => {
  try {
    if (scheduler.isRunning) {
      return res.status(409).json({
        error: 'Organisation d√©j√† en cours',
        message: 'Une organisation quotidienne est d√©j√† en cours d\'ex√©cution'
      });
    }

    logger.info('Organisation quotidienne d√©clench√©e manuellement via API');

    // Ex√©cution asynchrone pour ne pas bloquer la r√©ponse
    scheduler.runManualOrganization()
      .then(report => {
        logger.info('Organisation manuelle termin√©e avec succ√®s');
      })
      .catch(error => {
        logger.error('Erreur lors de l\'organisation manuelle:', error.message);
      });

    res.json({
      success: true,
      message: 'Organisation quotidienne d√©marr√©e',
      status: 'running',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors du lancement de l\'organisation:', error.message);
    res.status(500).json({
      error: 'Erreur lors du lancement de l\'organisation',
      details: error.message
    });
  }
});

// Lancer UNIQUEMENT l'analyse Airtable intelligente avec NOUVEAU syst√®me intelligent
router.post('/analyze-airtable', async (req, res) => {
  try {
    logger.info('üß† Analyse Airtable INTELLIGENTE (Reclaim.ai style) d√©clench√©e via API');

    const IntelligentScheduler = require('../../orchestrator/intelligent-scheduler');
    const intelligentScheduler = new IntelligentScheduler();

    // Ex√©cution asynchrone
    intelligentScheduler.initialize()
      .then(() => intelligentScheduler.analyzeAndScheduleFromCRM())
      .then(report => {
        logger.info(`‚úÖ Planification intelligente termin√©e: ${report.tasksCreated} t√¢ches cr√©√©es avec Next Best Time`);
      })
      .catch(error => {
        logger.error('‚ùå Erreur planification intelligente:', error.message);
      });

    res.json({
      success: true,
      message: 'üß† Planification intelligente d√©marr√©e (syst√®me Reclaim.ai) - Next Best Time activ√©',
      status: 'running',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lancement planification intelligente:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la planification intelligente',
      details: error.message
    });
  }
});

// Ajustement continu intelligent (reschedule automatique)
router.post('/continuous-adjust', async (req, res) => {
  try {
    logger.info('üîÑ Ajustement continu d√©clench√© via API');

    const IntelligentScheduler = require('../../orchestrator/intelligent-scheduler');
    const intelligentScheduler = new IntelligentScheduler();

    // Ex√©cuter de mani√®re asynchrone avec tracking visible
    intelligentScheduler.initialize()
      .then(() => intelligentScheduler.performContinuousAdjustment())
      .then(result => {
        logger.info(`‚úÖ Ajustement continu termin√©: ${result.tasksRescheduled} t√¢ches replanifi√©es (${result.conflictsDetected} conflits d√©tect√©s sur ${result.tasksAnalyzed} t√¢ches)`);
      })
      .catch(error => {
        logger.error('‚ùå Erreur ajustement continu:', error.message);
      });

    // R√©ponse imm√©diate avec indication que l'activit√© est track√©e
    res.json({
      success: true,
      message: 'üîÑ Ajustement continu lanc√© - Visible dans "Activit√© en Temps R√©el"',
      status: 'running',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lancement ajustement continu:', error.message);
    res.status(500).json({
      error: 'Erreur lors de l\'ajustement continu',
      details: error.message
    });
  }
});

// Nettoyer Calendar des t√¢ches auto-g√©n√©r√©es
router.post('/clean-calendar', async (req, res) => {
  try {
    logger.info('üßπ Nettoyage Calendar d√©clench√© via API - Suppression t√¢ches auto-g√©n√©r√©es');

    const GoogleCalendarAPI = require('../../api/google-calendar-api');
    const config = require('../../config/config');
    const googleCalendar = new GoogleCalendarAPI();

    await googleCalendar.loadTokens();

    const calendarId = config.calendars.jeremy;
    const now = new Date();
    const endDate = new Date();
    endDate.setMonth(now.getMonth() + 12); // Chercher sur 1 an

    // R√©cup√©rer tous les √©v√©nements
    const events = await googleCalendar.getEvents(calendarId, now, endDate);

    // Filtrer √©v√©nements auto-g√©n√©r√©s
    const autoGeneratedKeywords = [
      'auto-generated',
      'cap-numerique',
      'auto-scheduled',
      'Generated with Claude Code',
      'TickTick:'
    ];

    const toDelete = events.filter(event => {
      const summary = (event.summary || '').toLowerCase();
      const description = (event.description || '').toLowerCase();

      return autoGeneratedKeywords.some(keyword =>
        summary.includes(keyword.toLowerCase()) ||
        description.includes(keyword.toLowerCase())
      );
    });

    logger.info(`üßπ ${toDelete.length} √©v√©nements auto-g√©n√©r√©s trouv√©s sur ${events.length} total`);

    // Supprimer les √©v√©nements
    let deleted = 0;
    for (const event of toDelete) {
      try {
        await googleCalendar.calendar.events.delete({
          calendarId,
          eventId: event.id
        });
        deleted++;
        logger.info(`üóëÔ∏è Supprim√©: "${event.summary}"`);
      } catch (error) {
        logger.error(`Erreur suppression √©v√©nement ${event.id}:`, error.message);
      }
    }

    logger.info(`‚úÖ Nettoyage Calendar termin√©: ${deleted} √©v√©nements supprim√©s`);

    res.json({
      success: true,
      message: `‚úÖ ${deleted} √©v√©nements auto-g√©n√©r√©s supprim√©s du Calendar`,
      eventsFound: toDelete.length,
      eventsDeleted: deleted,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur nettoyage Calendar:', error.message);
    res.status(500).json({
      error: 'Erreur lors du nettoyage Calendar',
      details: error.message
    });
  }
});

// Lancer une synchronisation manuelle
router.post('/sync', async (req, res) => {
  try {
    logger.info('Synchronisation manuelle d√©clench√©e via API');

    const startTime = Date.now();
    await scheduler.calendarSync.performFullSync();
    const duration = Date.now() - startTime;

    logger.info(`Synchronisation manuelle termin√©e en ${duration}ms`);

    res.json({
      success: true,
      message: 'Synchronisation termin√©e avec succ√®s',
      duration,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la synchronisation manuelle:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la synchronisation',
      details: error.message
    });
  }
});

// === RAPPORTS ===

// G√©n√©rer un rapport quotidien
router.get('/report/daily', async (req, res) => {
  try {
    const report = await scheduler.generateDailyReport();

    res.json({
      success: true,
      report,
      generated: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la g√©n√©ration du rapport:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la g√©n√©ration du rapport',
      details: error.message
    });
  }
});

// Obtenir l'historique des ex√©cutions (simplifi√©)
router.get('/history', async (req, res) => {
  try {
    // Ici on pourrait impl√©menter un vrai syst√®me de persistance
    // Pour l'instant, retourner des informations basiques

    const { limit = 10 } = req.query;

    const history = {
      lastRun: scheduler.lastRunTime || null,
      schedulerStatus: scheduler.getSchedulerStatus(),
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      // Placeholder pour un vrai historique
      executions: []
    };

    res.json({
      success: true,
      history,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration de l\'historique:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de l\'historique',
      details: error.message
    });
  }
});

// === ANALYSE ET OPTIMISATION ===

// Analyser les patterns de charge de travail
router.get('/analysis/workload', async (req, res) => {
  try {
    const { days = 7 } = req.query;

    const analysis = await scheduler.analyzeWorkloadPatterns();

    res.json({
      success: true,
      analysis,
      daysAnalyzed: parseInt(days),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de l\'analyse de la charge:', error.message);
    res.status(500).json({
      error: 'Erreur lors de l\'analyse de la charge',
      details: error.message
    });
  }
});

// Obtenir des suggestions d'optimisation
router.get('/suggestions', async (req, res) => {
  try {
    const workloadAnalysis = await scheduler.analyzeWorkloadPatterns();
    const optimizations = await scheduler.suggestOptimizations(workloadAnalysis);

    res.json({
      success: true,
      suggestions: optimizations,
      basedOn: 'workload_analysis',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la g√©n√©ration des suggestions:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la g√©n√©ration des suggestions',
      details: error.message
    });
  }
});

// === PLANIFICATION AVANC√âE ===

// Planifier les prochains jours
router.post('/plan', async (req, res) => {
  try {
    const { days = 7, mode = 'intelligent' } = req.body;

    logger.info(`Planification ${mode} demand√©e pour ${days} jours`);

    const planning = await scheduler.planUpcomingDays();

    res.json({
      success: true,
      planning,
      days: parseInt(days),
      mode,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la planification:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la planification',
      details: error.message
    });
  }
});

// R√©organiser les t√¢ches
router.post('/reorganize', async (req, res) => {
  try {
    if (scheduler.isRunning) {
      return res.status(409).json({
        error: 'R√©organisation impossible',
        message: 'Une organisation est d√©j√† en cours'
      });
    }

    logger.info('R√©organisation manuelle d√©clench√©e via API');

    const startTime = Date.now();
    await scheduler.performIntelligentReorganization();
    const duration = Date.now() - startTime;

    res.json({
      success: true,
      message: 'R√©organisation termin√©e avec succ√®s',
      duration,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©organisation:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©organisation',
      details: error.message
    });
  }
});

// === CONFIGURATION ===

// Obtenir la configuration du scheduler
router.get('/config', (req, res) => {
  try {
    const config = require('../../config/config');

    const schedulerConfig = {
      dailyTime: config.scheduler.dailyTime,
      syncInterval: config.scheduler.syncInterval,
      maxDailyTasks: config.scheduler.maxDailyTasks,
      timezone: config.scheduler.timezone,
      priorities: config.priorities
    };

    res.json({
      success: true,
      config: schedulerConfig
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration de la configuration:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de la configuration',
      details: error.message
    });
  }
});

// Mettre √† jour la configuration des priorit√©s (temporaire)
router.post('/config/priorities', (req, res) => {
  try {
    const { weights } = req.body;

    if (!weights || typeof weights !== 'object') {
      return res.status(400).json({
        error: 'Poids de priorit√© requis',
        field: 'weights'
      });
    }

    // Validation des poids
    const validKeys = ['complexityWeight', 'urgencyWeight', 'durationWeight', 'contextWeight'];
    const invalidKeys = Object.keys(weights).filter(key => !validKeys.includes(key));

    if (invalidKeys.length > 0) {
      return res.status(400).json({
        error: 'Cl√©s de poids invalides',
        invalidKeys
      });
    }

    // V√©rifier que la somme des poids est proche de 1
    const totalWeight = Object.values(weights).reduce((sum, weight) => sum + weight, 0);
    if (Math.abs(totalWeight - 1) > 0.1) {
      return res.status(400).json({
        error: 'La somme des poids doit √™tre proche de 1',
        currentSum: totalWeight
      });
    }

    // Mettre √† jour les poids dans le calculateur de priorit√©
    scheduler.priorityCalculator.updateWeights(weights);

    logger.info('Configuration des priorit√©s mise √† jour via API');

    res.json({
      success: true,
      message: 'Poids de priorit√© mis √† jour',
      newWeights: weights
    });

  } catch (error) {
    logger.error('Erreur lors de la mise √† jour des priorit√©s:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la mise √† jour des priorit√©s',
      details: error.message
    });
  }
});

// === SANT√â DU SYST√àME ===

// V√©rifier la sant√© du syst√®me de planification
router.get('/health', async (req, res) => {
  try {
    const health = await scheduler.checkSystemHealth();

    const overallStatus = health.overall ? 200 : 503;

    res.status(overallStatus).json({
      success: health.overall,
      health,
      scheduler: {
        running: !scheduler.isRunning,
        jobs: scheduler.scheduledJobs.size
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la v√©rification de sant√©:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification de sant√©',
      details: error.message
    });
  }
});

// === ACTIVIT√â EN TEMPS R√âEL ===

// Obtenir l'√©tat de l'activit√© en cours
router.get('/activity', (req, res) => {
  try {
    const tracker = getActivityTracker();
    const state = tracker.getCurrentState();

    res.json({
      success: true,
      activity: state,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration de l\'activit√©:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de l\'activit√©',
      details: error.message
    });
  }
});

// Obtenir l'historique des activit√©s
router.get('/activity/history', (req, res) => {
  try {
    const tracker = getActivityTracker();
    const { limit = 20 } = req.query;
    const history = tracker.getHistory(parseInt(limit));

    res.json({
      success: true,
      history,
      count: history.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration de l\'historique d\'activit√©:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de l\'historique',
      details: error.message
    });
  }
});

// Obtenir les statistiques d'activit√©
router.get('/activity/stats', (req, res) => {
  try {
    const tracker = getActivityTracker();
    const stats = tracker.getStats();

    res.json({
      success: true,
      stats,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la r√©cup√©ration des stats d\'activit√©:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration des stats',
      details: error.message
    });
  }
});

// === NETTOYAGE CALENDRIER ===

// Lancer un nettoyage manuel du calendrier
router.post('/cleanup', async (req, res) => {
  try {
    logger.info('Nettoyage manuel du calendrier d√©clench√© via API');

    const startTime = Date.now();
    const report = await scheduler.calendarCleaner.performCleanup();
    const duration = Date.now() - startTime;

    res.json({
      success: true,
      message: 'Nettoyage termin√©',
      report,
      duration,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors du nettoyage manuel:', error.message);
    res.status(500).json({
      error: 'Erreur lors du nettoyage',
      details: error.message
    });
  }
});

// Obtenir le rapport de sant√© du calendrier
router.get('/calendar/health', async (req, res) => {
  try {
    const healthReport = await scheduler.calendarCleaner.generateHealthReport();

    const statusCode = healthReport.isHealthy ? 200 : 503;

    res.status(statusCode).json({
      success: true,
      health: healthReport,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Erreur lors de la g√©n√©ration du rapport de sant√© calendrier:', error.message);
    res.status(500).json({
      error: 'Erreur lors de la g√©n√©ration du rapport',
      details: error.message
    });
  }
});

module.exports = router;
module.exports.scheduler = scheduler;