#!/usr/bin/env node

/**
 * Script de test pour la planification sur 60 jours
 * V√©rifie:
 * - Distribution sur l'horizon complet de 60 jours
 * - Charge l√©g√®re (2 t√¢ches max/jour)
 * - √âquilibrage automatique de la charge
 * - Pas de jours surcharg√©s
 */

const DailyScheduler = require('./src/scheduler/daily-scheduler');
const logger = require('./src/utils/logger');
const config = require('./src/config/config');

async function test60DayPlanning() {
  console.log('\nüß™ Test de la planification intelligente sur 60 jours\n');
  console.log('='.repeat(70));

  try {
    // Initialiser le scheduler
    const scheduler = new DailyScheduler();
    await scheduler.initialize();

    console.log(`\nüìä Configuration:`);
    console.log(`  - Horizon de planification: ${config.scheduler.planningHorizonDays} jours`);
    console.log(`  - Charge maximale par jour: ${config.scheduler.maxDailyTasks} t√¢ches`);
    console.log(`  - Capacit√© totale: ${config.scheduler.planningHorizonDays * config.scheduler.maxDailyTasks} t√¢ches`);

    // Test 1: Analyser les cr√©neaux disponibles sur 60 jours
    console.log('\n\nüìÖ Test 1: Analyse des cr√©neaux sur 60 jours\n');

    const availableSlots = await scheduler.analyzeAvailableSlots();

    console.log(`  ‚úÖ Cr√©neaux analys√©s: ${availableSlots.size} jours`);

    // Statistiques des cr√©neaux
    let daysWithSlots = 0;
    let totalSlots = 0;
    let daysWithSport = 0;

    for (const [day, slots] of availableSlots.entries()) {
      if (slots.length > 0) {
        daysWithSlots++;
        totalSlots += slots.length;

        if (slots[0].hasSport) {
          daysWithSport++;
        }
      }
    }

    console.log(`  - Jours avec cr√©neaux disponibles: ${daysWithSlots}/${availableSlots.size}`);
    console.log(`  - Total cr√©neaux disponibles: ${totalSlots}`);
    console.log(`  - Jours avec sport d√©tect√©: ${daysWithSport}`);
    console.log(`  - Moyenne cr√©neaux/jour: ${(totalSlots / daysWithSlots).toFixed(1)}`);

    // Test 2: Simuler une distribution de t√¢ches
    console.log('\n\nüìù Test 2: Simulation de distribution de t√¢ches\n');

    // Cr√©er des t√¢ches de test simul√©es
    const mockTasks = [];
    for (let i = 1; i <= 50; i++) {
      mockTasks.push({
        id: `test-${i}`,
        title: `T√¢che de test ${i}`,
        content: i % 3 === 0 ? 'D√©veloppement feature' : i % 3 === 1 ? 'Appel client' : 'Email administratif',
        priority: Math.floor(Math.random() * 5) + 1,
        tags: i % 10 === 0 ? ['urgent'] : [],
        dueDate: null // Pas de date = √† planifier
      });
    }

    console.log(`  T√¢ches √† distribuer: ${mockTasks.length}`);

    // Calculer les priorit√©s (simuler)
    const prioritizedTasks = mockTasks.map((task, index) => ({
      ...task,
      calculatedPriority: task.priority + (task.tags.includes('urgent') ? 10 : 0) + (1 / (index + 1))
    })).sort((a, b) => b.calculatedPriority - a.calculatedPriority);

    // Distribuer les t√¢ches
    const distribution = await scheduler.distributeTasks(prioritizedTasks, availableSlots);

    console.log(`\n  ‚úÖ Distribution effectu√©e:`);

    const distributedDays = Object.keys(distribution);
    const totalDistributed = Object.values(distribution).reduce((sum, tasks) => sum + tasks.length, 0);

    console.log(`    - T√¢ches distribu√©es: ${totalDistributed}/${mockTasks.length}`);
    console.log(`    - Jours utilis√©s: ${distributedDays.length}`);
    console.log(`    - Charge moyenne: ${(totalDistributed / distributedDays.length).toFixed(2)} t√¢ches/jour`);

    // Test 3: V√©rifier l'√©quilibrage
    console.log('\n\n‚öñÔ∏è  Test 3: V√©rification de l\'√©quilibrage\n');

    const loads = Object.entries(distribution).map(([day, tasks]) => ({
      day,
      load: tasks.length
    }));

    const maxLoad = Math.max(...loads.map(d => d.load));
    const minLoad = Math.min(...loads.map(d => d.load));
    const avgLoad = totalDistributed / distributedDays.length;

    console.log(`  - Charge minimale: ${minLoad} t√¢ches/jour`);
    console.log(`  - Charge maximale: ${maxLoad} t√¢ches/jour`);
    console.log(`  - Charge moyenne: ${avgLoad.toFixed(2)} t√¢ches/jour`);
    console.log(`  - √âcart: ${maxLoad - minLoad} t√¢ches`);

    // V√©rifier les r√®gles
    const violations = loads.filter(d => d.load > config.scheduler.maxDailyTasks);

    if (violations.length > 0) {
      console.log(`\n  ‚ùå ${violations.length} jours d√©passent la charge maximale:`);
      violations.forEach(v => {
        console.log(`    - ${v.day}: ${v.load} t√¢ches (max: ${config.scheduler.maxDailyTasks})`);
      });
    } else {
      console.log(`\n  ‚úÖ Aucun jour ne d√©passe la charge maximale (${config.scheduler.maxDailyTasks} t√¢ches/jour)`);
    }

    // Test 4: V√©rifier la r√©partition temporelle
    console.log('\n\nüìÜ Test 4: R√©partition temporelle\n');

    // Grouper par semaine
    const weeks = {};
    for (const [day, tasks] of Object.entries(distribution)) {
      const date = new Date(day);
      const weekNumber = Math.floor((date - new Date()) / (7 * 24 * 60 * 60 * 1000));

      if (!weeks[weekNumber]) {
        weeks[weekNumber] = { tasks: 0, days: 0 };
      }
      weeks[weekNumber].tasks += tasks.length;
      weeks[weekNumber].days++;
    }

    console.log(`  R√©partition par semaine (${Object.keys(weeks).length} premi√®res semaines utilis√©es):`);

    Object.entries(weeks).slice(0, 8).forEach(([weekNum, data]) => {
      const weekStart = Math.floor(parseInt(weekNum));
      console.log(`    Semaine ${parseInt(weekNum) + 1}: ${data.tasks} t√¢ches sur ${data.days} jours (${(data.tasks / data.days).toFixed(1)} t√¢ches/jour)`);
    });

    // Test 5: Afficher un √©chantillon de la distribution
    console.log('\n\nüìã Test 5: √âchantillon de distribution (10 premiers jours)\n');

    const sortedDays = Object.keys(distribution).sort();
    sortedDays.slice(0, 10).forEach(day => {
      const date = new Date(day);
      const dayName = date.toLocaleDateString('fr-FR', { weekday: 'long' });
      const dateStr = date.toLocaleDateString('fr-FR');
      const tasks = distribution[day];

      console.log(`\n  ${dayName} ${dateStr} (${tasks.length} t√¢che${tasks.length > 1 ? 's' : ''}):`);
      tasks.forEach(task => {
        console.log(`    - ${task.title}`);
      });
    });

    console.log('\n' + '='.repeat(70));
    console.log('\n‚úÖ Tests de planification 60 jours termin√©s avec succ√®s\n');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter les tests
test60DayPlanning()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('Erreur fatale:', error);
    process.exit(1);
  });
