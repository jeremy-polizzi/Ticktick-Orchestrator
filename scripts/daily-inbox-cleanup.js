#!/usr/bin/env node

/**
 * üóÇÔ∏è Script cron pour nettoyage quotidien Inbox
 *
 * S'ex√©cute une fois par jour (matin, apr√®s wake-up)
 * Analyse toutes les t√¢ches Inbox et les classe intelligemment dans leurs projets
 * avec estimation dur√©e, priorit√©s, et planification sur 60 jours.
 *
 * R√àGLES STRICTES:
 * - Planification √† partir de DEMAIN (jamais aujourd'hui)
 * - Max 2-3 t√¢ches/jour
 * - T√¢ches courtes le week-end
 * - R√©partition √©quilibr√©e sur 60 jours
 *
 * Le LLM d√©cide tout: projet, dur√©e, priorit√©, deadline, tags
 */

const IntelligentAgent = require('../src/llm/intelligent-agent');
const logger = require('../src/utils/logger');

async function runDailyInboxCleanup() {
  logger.info('üóÇÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  logger.info('üóÇÔ∏è Cron: D√©marrage nettoyage quotidien Inbox');
  logger.info('üóÇÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

  try {
    const agent = new IntelligentAgent();

    // Initialiser le LLM et les APIs
    await agent.initialize();
    logger.info('‚úÖ IntelligentAgent initialis√© (GROQ + Gemini fallback)');

    // Lancer le nettoyage Inbox
    const result = await agent.processInboxToProjects();

    if (result.success) {
      logger.info('üóÇÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      logger.info(`üéâ Nettoyage Inbox termin√© avec succ√®s!`);
      logger.info(`üìä Statistiques:`);
      logger.info(`   - T√¢ches Inbox trouv√©es: ${result.total}`);
      logger.info(`   - T√¢ches trait√©es:       ${result.processed}`);
      logger.info(`   - T√¢ches d√©plac√©es:      ${result.moved}`);
      logger.info(`   - √âchecs:                ${result.failed}`);
      logger.info('üóÇÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

      if (result.moved > 0) {
        logger.info('üìã Aper√ßu des d√©placements:');
        result.results.slice(0, 5).forEach((r, i) => {
          if (r.success) {
            logger.info(`   ${i + 1}. "${r.title}" ‚Üí ${r.project}`);
          }
        });
        if (result.results.length > 5) {
          logger.info(`   ... et ${result.results.length - 5} autres`);
        }
      }

      // Note sur le r√©√©quilibrage automatique
      if (result.moved > 0) {
        logger.info('');
        logger.info('‚ÑπÔ∏è  Note: Le continuous-adjust s\'ex√©cutera automatiquement toutes les 30min');
        logger.info('   pour r√©√©quilibrer la charge si des t√¢ches sont report√©es.');
      }
    } else {
      logger.error(`‚ùå √âchec nettoyage Inbox: ${result.error}`);
      process.exit(1);
    }

  } catch (error) {
    logger.error('‚ùå Cron: Erreur nettoyage Inbox:', error.message);
    logger.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le nettoyage
runDailyInboxCleanup();
